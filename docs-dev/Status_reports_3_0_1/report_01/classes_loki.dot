digraph "classes_loki" {
rankdir=BT
charset="utf-8"
"loki_modules.loki_mixins.logger_mixin.LoggerMixin.ColoredFormatter" [color="black", fontcolor="black", label=<{ColoredFormatter|COLORS : dict<br ALIGN="LEFT"/>formatter<br ALIGN="LEFT"/>|format(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_db.Database" [color="black", fontcolor="black", label=<{Database|chr_name : dict<br ALIGN="LEFT"/>chr_num : dict<br ALIGN="LEFT"/>cname : str<br ALIGN="LEFT"/>cnum : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"loki_modules.loki_mixins.db_config_mixin.DbConfigMixin" [color="black", fontcolor="black", label=<{DbConfigMixin|<br ALIGN="LEFT"/>|attachDatabaseFile(dbFile, quiet)<br ALIGN="LEFT"/>attachTempDatabase(db)<br ALIGN="LEFT"/>configureDatabase(db, tempMem)<br ALIGN="LEFT"/>detachDatabaseFile(quiet)<br ALIGN="LEFT"/>getDatabaseMemoryLimit()<br ALIGN="LEFT"/>getDatabaseMemoryUsage(resetPeak)<br ALIGN="LEFT"/>setDatabaseMemoryLimit(limit)<br ALIGN="LEFT"/>testDatabaseWriteable()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_mixins.db_liftover_mixin.DbLiftOverMixin" [color="black", fontcolor="black", label=<{DbLiftOverMixin|<br ALIGN="LEFT"/>|generateLiftOverLoci(oldHG, newHG, loci, tally, errorCallback)<br ALIGN="LEFT"/>generateLiftOverRegions(oldHG, newHG, regions, tally, errorCallback)<br ALIGN="LEFT"/>hasLiftOverChains(oldHG, newHG)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_mixins.db_operations_mixin.DbOperationsMixin" [color="black", fontcolor="black", label=<{DbOperationsMixin|<br ALIGN="LEFT"/>|addWarning(source_id, warning)<br ALIGN="LEFT"/>generateGRChByUCSChg(ucschg)<br ALIGN="LEFT"/>getDatabaseSetting(setting, type)<br ALIGN="LEFT"/>getLDProfileID(ldprofile)<br ALIGN="LEFT"/>getLDProfileIDs(ldprofiles)<br ALIGN="LEFT"/>getLDProfiles(ldprofiles)<br ALIGN="LEFT"/>getNamespaceID(namespace)<br ALIGN="LEFT"/>getNamespaceIDs(namespaces)<br ALIGN="LEFT"/>getRelationshipID(relationship)<br ALIGN="LEFT"/>getRelationshipIDs(relationships)<br ALIGN="LEFT"/>getRoleID(role)<br ALIGN="LEFT"/>getRoleIDs(roles)<br ALIGN="LEFT"/>getSourceID(source)<br ALIGN="LEFT"/>getSourceIDFiles(sourceID)<br ALIGN="LEFT"/>getSourceIDOptions(sourceID)<br ALIGN="LEFT"/>getSourceIDVersion(sourceID)<br ALIGN="LEFT"/>getSourceIDs(sources)<br ALIGN="LEFT"/>getSourceModuleOptions(sources)<br ALIGN="LEFT"/>getSourceModuleVersions(sources)<br ALIGN="LEFT"/>getSourceModules()<br ALIGN="LEFT"/>getSubtypeID(subtype)<br ALIGN="LEFT"/>getSubtypeIDs(subtypes)<br ALIGN="LEFT"/>getTypeID(type)<br ALIGN="LEFT"/>getTypeIDs(types)<br ALIGN="LEFT"/>getUCSChgByGRCh(grch)<br ALIGN="LEFT"/>prepareTableForQuery(table)<br ALIGN="LEFT"/>prepareTableForUpdate(table)<br ALIGN="LEFT"/>setDatabaseSetting(setting, value)<br ALIGN="LEFT"/>updateDatabase(sources, sourceOptions, cacheOnly, forceUpdate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_mixins.db_query_mixin.DbQueryMixin" [color="black", fontcolor="black", label=<{DbQueryMixin|<br ALIGN="LEFT"/>|generateBiopolymerIDsByIdentifiers(identifiers, minMatch, maxMatch, tally, errorCallback)<br ALIGN="LEFT"/>generateBiopolymerIDsBySearch(searches)<br ALIGN="LEFT"/>generateBiopolymerNameStats(namespaceID, typeID)<br ALIGN="LEFT"/>generateBiopolymersByIDs(ids)<br ALIGN="LEFT"/>generateCurrentRSesByRSes(rses, tally)<br ALIGN="LEFT"/>generateGroupIDsByIdentifiers(identifiers, minMatch, maxMatch, tally, errorCallback)<br ALIGN="LEFT"/>generateGroupIDsBySearch(searches)<br ALIGN="LEFT"/>generateGroupNameStats(namespaceID, typeID)<br ALIGN="LEFT"/>generateGroupsByIDs(ids)<br ALIGN="LEFT"/>generateSNPLociByRSes(rses, minMatch, maxMatch, validated, tally, errorCallback)<br ALIGN="LEFT"/>generateTypedBiopolymerIDsByIdentifiers(typeID, identifiers, minMatch, maxMatch, tally, errorCallback)<br ALIGN="LEFT"/>generateTypedBiopolymerIDsBySearch(typeID, searches)<br ALIGN="LEFT"/>generateTypedGroupIDsByIdentifiers(typeID, identifiers, minMatch, maxMatch, tally, errorCallback)<br ALIGN="LEFT"/>generateTypedGroupIDsBySearch(typeID, searches)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_mixins.db_schema.DbSchema" [color="black", fontcolor="black", label=<{DbSchema|schema : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"loki_modules.loki_mixins.db_schema_mixin.DbSchemaMixin" [color="black", fontcolor="black", label=<{DbSchemaMixin|<br ALIGN="LEFT"/>|auditDatabaseObjects(schema, dbName, tblList, doTables, idxList, doIndecies, doRepair)<br ALIGN="LEFT"/>createDatabaseIndices(schema, dbName, tblList, doTables, idxList)<br ALIGN="LEFT"/>createDatabaseObjects(schema, dbName, tblList, doTables, idxList, doIndecies)<br ALIGN="LEFT"/>createDatabaseTables(schema, dbName, tblList, doIndecies)<br ALIGN="LEFT"/>defragmentDatabase()<br ALIGN="LEFT"/>dropDatabaseIndices(schema, dbName, tblList, idxList)<br ALIGN="LEFT"/>dropDatabaseObjects(schema, dbName, tblList, doTables, idxList, doIndecies)<br ALIGN="LEFT"/>dropDatabaseTables(schema, dbName, tblList)<br ALIGN="LEFT"/>finalizeDatabase()<br ALIGN="LEFT"/>optimizeDatabase()<br ALIGN="LEFT"/>updateDatabaseSchema()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_mixins.db_version_mixin.DbVersionMixin" [color="black", fontcolor="black", label=<{DbVersionMixin|<br ALIGN="LEFT"/>|getDatabaseDriverName()<br ALIGN="LEFT"/>getDatabaseDriverVersion()<br ALIGN="LEFT"/>getDatabaseInterfaceName()<br ALIGN="LEFT"/>getDatabaseInterfaceVersion()<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>getVersionTuple()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_mixins.logger_mixin.LoggerMixin" [color="black", fontcolor="black", label=<{LoggerMixin|<br ALIGN="LEFT"/>|getVerbose()<br ALIGN="LEFT"/>get_log_file()<br ALIGN="LEFT"/>init_logger(log_file, log_level)<br ALIGN="LEFT"/>log(message, level, indent)<br ALIGN="LEFT"/>log_exception(error)<br ALIGN="LEFT"/>setVerbose(verbose)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_mixins.source_utility_methods_mixin.SourceUtilityMethods.getHTTPHeaders.NoRedirection" [color="black", fontcolor="black", label=<{NoRedirection|https_response<br ALIGN="LEFT"/>|http_response(request, response)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_mixins.source_utility_methods_mixin copy.SourceUtilityMethods.getHTTPHeaders.NoRedirection" [color="black", fontcolor="black", label=<{NoRedirection|https_response<br ALIGN="LEFT"/>|http_response(request, response)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_source.Source" [color="black", fontcolor="black", label=<{Source|<br ALIGN="LEFT"/>|deleteAll()<br ALIGN="LEFT"/>download(options)<br ALIGN="LEFT"/>getOptions()<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>log(message, level, indent)<br ALIGN="LEFT"/>log_exception(error)<br ALIGN="LEFT"/>prepareTableForQuery(table)<br ALIGN="LEFT"/>prepareTableForUpdate(table)<br ALIGN="LEFT"/>update(options)<br ALIGN="LEFT"/>validateOptions(options)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_mixins.source_db_operations_mixin.SourceDbOperations" [color="black", fontcolor="black", label=<{SourceDbOperations|<br ALIGN="LEFT"/>|addBiopolymerLDProfileRegions(ldprofileID, biopolymerRegions)<br ALIGN="LEFT"/>addBiopolymerNameNames(biopolymerNameNames)<br ALIGN="LEFT"/>addBiopolymerNames(biopolymerNames)<br ALIGN="LEFT"/>addBiopolymerNamespacedNames(namespaceID, biopolymerNames)<br ALIGN="LEFT"/>addBiopolymerRegions(biopolymerRegions)<br ALIGN="LEFT"/>addBiopolymerTypedNameNamespacedNames(oldTypeID, newNamespaceID, biopolymerNameNames)<br ALIGN="LEFT"/>addBiopolymers(biopolymers)<br ALIGN="LEFT"/>addChainData(chain_data_list)<br ALIGN="LEFT"/>addChains(old_ucschg, new_ucschg, chain_list)<br ALIGN="LEFT"/>addChromosomeSNPLoci(chromosome, snpLoci)<br ALIGN="LEFT"/>addGWASAnnotations(gwasAnnotations)<br ALIGN="LEFT"/>addGroupBiopolymers(groupBiopolymers)<br ALIGN="LEFT"/>addGroupChildRelationships(groupRels)<br ALIGN="LEFT"/>addGroupMemberNames(groupMemberNames)<br ALIGN="LEFT"/>addGroupMemberTypedNamespacedNames(typeID, namespaceID, groupMemberNames)<br ALIGN="LEFT"/>addGroupNames(groupNames)<br ALIGN="LEFT"/>addGroupNamespacedNames(namespaceID, groupNames)<br ALIGN="LEFT"/>addGroupParentRelationships(groupRels)<br ALIGN="LEFT"/>addGroupRelationships(groupRels)<br ALIGN="LEFT"/>addGroupSiblingRelationships(groupRels)<br ALIGN="LEFT"/>addGroups(groups)<br ALIGN="LEFT"/>addLDProfile(ldprofile, description, metric, value)<br ALIGN="LEFT"/>addLDProfiles(ldprofiles)<br ALIGN="LEFT"/>addNamespace(namespace, polygenic)<br ALIGN="LEFT"/>addNamespaces(namespaces)<br ALIGN="LEFT"/>addRelationship(relationship)<br ALIGN="LEFT"/>addRelationships(relationships)<br ALIGN="LEFT"/>addRole(role, description, coding, exon)<br ALIGN="LEFT"/>addRoles(roles)<br ALIGN="LEFT"/>addSNPEntrezRoles(snpRoles)<br ALIGN="LEFT"/>addSNPLoci(snpLoci)<br ALIGN="LEFT"/>addSNPMerges(snpMerges)<br ALIGN="LEFT"/>addSource(source)<br ALIGN="LEFT"/>addSources(sources)<br ALIGN="LEFT"/>addType(type)<br ALIGN="LEFT"/>addTypedBiopolymers(typeID, biopolymers)<br ALIGN="LEFT"/>addTypedGroups(typeID, groups)<br ALIGN="LEFT"/>addTypes(types)<br ALIGN="LEFT"/>getSourceID()<br ALIGN="LEFT"/>getSourceName()<br ALIGN="LEFT"/>setSourceBuilds(grch, ucschg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_mixins.source_utility_methods_mixin.SourceUtilityMethods" [color="black", fontcolor="black", label=<{SourceUtilityMethods|<br ALIGN="LEFT"/>|downloadFilesFromFTP(remHost, remFiles)<br ALIGN="LEFT"/>downloadFilesFromHTTP(remHost, remFiles, reqHeaders, alwaysDownload)<br ALIGN="LEFT"/>downloadFilesFromHTTPS(remHost, remFiles, reqHeaders, alwaysDownload)<br ALIGN="LEFT"/>findConnectedComponents(neighbors)<br ALIGN="LEFT"/>findEdgeDisjointCliques(neighbors)<br ALIGN="LEFT"/>findMaximalCliques(neighbors)<br ALIGN="LEFT"/>getHTTPHeaders(remHost, remURL, reqData, reqHeaders)<br ALIGN="LEFT"/>zfile(fileName, splitChar, chunkSize)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_mixins.source_utility_methods_mixin copy.SourceUtilityMethods" [color="black", fontcolor="black", label=<{SourceUtilityMethods|<br ALIGN="LEFT"/>|downloadFilesFromFTP(remHost, remFiles)<br ALIGN="LEFT"/>downloadFilesFromHTTP(remHost, remFiles, reqHeaders, alwaysDownload)<br ALIGN="LEFT"/>downloadFilesFromHTTPS(remHost, remFiles, reqHeaders, alwaysDownload)<br ALIGN="LEFT"/>findConnectedComponents(neighbors)<br ALIGN="LEFT"/>findEdgeDisjointCliques(neighbors)<br ALIGN="LEFT"/>findMaximalCliques(neighbors)<br ALIGN="LEFT"/>getHTTPHeaders(remHost, remURL, reqData, reqHeaders)<br ALIGN="LEFT"/>zfile(fileName, splitChar, chunkSize)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.loki_source_biogrid.Source_biogrid" [color="black", fontcolor="black", label=<{Source_biogrid|<br ALIGN="LEFT"/>|download(options, path)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>update(options, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.loki_source_chainfiles.Source_chainfiles" [color="black", fontcolor="black", label=<{Source_chainfiles|<br ALIGN="LEFT"/>|download(options, path)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>update(options, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.loki_source_dbsnp.Source_dbsnp" [color="black", fontcolor="black", label=<{Source_dbsnp|<br ALIGN="LEFT"/>|download(options, path)<br ALIGN="LEFT"/>getOptions()<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>processChmSNPs(fileChm, reBuild, includeUnvalidated, includeSuspect, includeWithdrawn, path)<br ALIGN="LEFT"/>update(options, path)<br ALIGN="LEFT"/>validateOptions(options)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.loki_source_entrez.Source_entrez" [color="black", fontcolor="black", label=<{Source_entrez|<br ALIGN="LEFT"/>|download(options, path)<br ALIGN="LEFT"/>getOptions()<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>update(options, path)<br ALIGN="LEFT"/>validateOptions(options)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.test.loki_source_genes.Source_genes" [color="black", fontcolor="black", label=<{Source_genes|<br ALIGN="LEFT"/>|<I>download</I>(options)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>update(options)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.loki_source_go.Source_go" [color="black", fontcolor="black", label=<{Source_go|<br ALIGN="LEFT"/>|download(options, path)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>update(options, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.loki_source_gwas.Source_gwas" [color="black", fontcolor="black", label=<{Source_gwas|<br ALIGN="LEFT"/>|download(options, path)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>update(options, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.test.loki_source_light.Source_light" [color="black", fontcolor="black", label=<{Source_light|<br ALIGN="LEFT"/>|<I>download</I>(options)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>update(options)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.loki_source_mint.Source_mint" [color="black", fontcolor="black", label=<{Source_mint|<br ALIGN="LEFT"/>|download(options, path)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>update(options, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.loki_source_oreganno.Source_oreganno" [color="black", fontcolor="black", label=<{Source_oreganno|<br ALIGN="LEFT"/>|download(options, path)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>update(options, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.test.loki_source_paint.Source_paint" [color="black", fontcolor="black", label=<{Source_paint|<br ALIGN="LEFT"/>|<I>download</I>(options)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>update(options)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.loki_source_pfam.Source_pfam" [color="black", fontcolor="black", label=<{Source_pfam|<br ALIGN="LEFT"/>|download(options, path)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>update(options, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.loki_source_pharmgkb.Source_pharmgkb" [color="black", fontcolor="black", label=<{Source_pharmgkb|<br ALIGN="LEFT"/>|download(options, path)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>update(options, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.loki_source_reactome.Source_reactome" [color="black", fontcolor="black", label=<{Source_reactome|<br ALIGN="LEFT"/>|download(options)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>update(options)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.test.loki_source_snps.Source_snps" [color="black", fontcolor="black", label=<{Source_snps|<br ALIGN="LEFT"/>|<I>download</I>(options)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>update(options)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.test.loki_source_spectrum.Source_spectrum" [color="black", fontcolor="black", label=<{Source_spectrum|<br ALIGN="LEFT"/>|<I>download</I>(options)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>update(options)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.loki_source_ucsc_ecr.Source_ucsc_ecr" [color="black", fontcolor="black", label=<{Source_ucsc_ecr|chr_grp_ids : list<br ALIGN="LEFT"/>table_locks : dict<br ALIGN="LEFT"/>|download(options, path)<br ALIGN="LEFT"/>getOptions()<br ALIGN="LEFT"/>getRegionName(species, ch, region)<br ALIGN="LEFT"/>getRegions(f, options)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>processECRs(sp, ch, chr_grp_ids, ecr_group_typeid, ecr_ns, ecr_typeid, ecr_ldprofile_id, rel_id, options, path)<br ALIGN="LEFT"/>update(options, path)<br ALIGN="LEFT"/>validateOptions(options)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.loki_source_ucsc_ecr copy.Source_ucsc_ecr" [color="black", fontcolor="black", label=<{Source_ucsc_ecr|chr_grp_ids : list<br ALIGN="LEFT"/>|download(options, path)<br ALIGN="LEFT"/>getOptions()<br ALIGN="LEFT"/>getRegionName(species, ch, region)<br ALIGN="LEFT"/>getRegions(f, options)<br ALIGN="LEFT"/>getVersionString()<br ALIGN="LEFT"/>processECRs(sp, ch, chr_grp_ids, ecr_group_typeid, ecr_ns, ecr_typeid, ecr_ldprofile_id, rel_id, options, path)<br ALIGN="LEFT"/>update(options, path)<br ALIGN="LEFT"/>validateOptions(options)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_updater.Updater" [color="black", fontcolor="black", label=<{Updater|keepDownload : bool<br ALIGN="LEFT"/>lock : lock<br ALIGN="LEFT"/>onlyDownload : bool<br ALIGN="LEFT"/>skipDownload : bool<br ALIGN="LEFT"/>srcSetsToDownload : dict<br ALIGN="LEFT"/>|attachSourceModules(sources)<br ALIGN="LEFT"/>findSourceModules()<br ALIGN="LEFT"/>flagTableUpdate(table)<br ALIGN="LEFT"/>getSourceModuleOptions(sources)<br ALIGN="LEFT"/>getSourceModuleVersions(sources)<br ALIGN="LEFT"/>getSourceModules()<br ALIGN="LEFT"/>loadSourceModules(sources)<br ALIGN="LEFT"/>log(message, level, indent)<br ALIGN="LEFT"/>log_exception(error)<br ALIGN="LEFT"/>prepareTableForQuery(table)<br ALIGN="LEFT"/>prepareTableForUpdate(table)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_mixins.updater_database.UpdaterDatabaseMixin" [color="black", fontcolor="black", label=<{UpdaterDatabaseMixin|srcSetsToDownload<br ALIGN="LEFT"/>|updateDatabase(sources, sourceOptions, cacheOnly, forceUpdate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_mixins.updater_download_mixin.UpdaterDownloadMixin" [color="black", fontcolor="black", label=<{UpdaterDownloadMixin|<br ALIGN="LEFT"/>|downloadAndHash(iwd, srcName, srcOptions)<br ALIGN="LEFT"/>fileHash(filename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_mixins.updater_liftover_mixin.UpdaterLiftOverMixin" [color="black", fontcolor="black", label=<{UpdaterLiftOverMixin|<br ALIGN="LEFT"/>|liftOverRegions(oldHG, newHG, sourceIDs)<br ALIGN="LEFT"/>liftOverSNPLoci(oldHG, newHG, sourceIDs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loki_mixins.updater_operations_mixin.UpdaterOperationsMixin" [color="black", fontcolor="black", label=<{UpdaterOperationsMixin|<br ALIGN="LEFT"/>|cleanupSNPEntrezRoles()<br ALIGN="LEFT"/>cleanupSNPLoci()<br ALIGN="LEFT"/>cleanupSNPMerges()<br ALIGN="LEFT"/>resolveBiopolymerNames()<br ALIGN="LEFT"/>resolveGroupMembers()<br ALIGN="LEFT"/>resolveSNPBiopolymerRoles()<br ALIGN="LEFT"/>updateBiopolymerZones()<br ALIGN="LEFT"/>updateMergedGWASAnnotations()<br ALIGN="LEFT"/>updateMergedSNPEntrezRoles()<br ALIGN="LEFT"/>updateMergedSNPLoci()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.util.liftOver.liftOver" [color="black", fontcolor="black", label=<{liftOver|<br ALIGN="LEFT"/>|liftRegion(chrom, start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"loki_modules.loaders.loki_source_biogrid.Source_biogrid" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.loki_source_chainfiles.Source_chainfiles" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.loki_source_dbsnp.Source_dbsnp" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.loki_source_entrez.Source_entrez" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.loki_source_go.Source_go" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.loki_source_gwas.Source_gwas" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.loki_source_mint.Source_mint" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.loki_source_oreganno.Source_oreganno" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.loki_source_pfam.Source_pfam" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.loki_source_pharmgkb.Source_pharmgkb" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.loki_source_reactome.Source_reactome" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.loki_source_ucsc_ecr copy.Source_ucsc_ecr" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.loki_source_ucsc_ecr.Source_ucsc_ecr" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.test.loki_source_genes.Source_genes" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.test.loki_source_light.Source_light" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.test.loki_source_paint.Source_paint" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.test.loki_source_snps.Source_snps" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loaders.test.loki_source_spectrum.Source_spectrum" -> "loki_modules.loki_source.Source" [arrowhead="empty", arrowtail="none"];
"loki_modules.loki_updater.Updater" -> "loki_modules.loki_mixins.db_operations_mixin.DbOperationsMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_updater", style="solid"];
"loki_modules.loki_updater.Updater" -> "loki_modules.loki_mixins.db_operations_mixin.DbOperationsMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_updater", style="solid"];
"loki_modules.loki_updater.Updater" -> "loki_modules.loki_mixins.db_operations_mixin.DbOperationsMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_updater", style="solid"];
"loki_modules.loki_updater.Updater" -> "loki_modules.loki_mixins.db_operations_mixin.DbOperationsMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_updater", style="solid"];

"loki_modules.loki_mixins.db_config_mixin.DbConfigMixin" -> "loki_modules.loki_db.Database" [label="Config"];
"loki_modules.loki_mixins.db_liftover_mixin.DbLiftOverMixin" -> "loki_modules.loki_db.Database" [label="LiftOver"];
"loki_modules.loki_mixins.db_operations_mixin.DbOperationsMixin" -> "loki_modules.loki_db.Database" [label="Operations"];
"loki_modules.loki_mixins.db_query_mixin.DbQueryMixin" -> "loki_modules.loki_db.Database" [label="Operations"];
"loki_modules.loki_mixins.db_schema_mixin.DbSchemaMixin" -> "loki_modules.loki_db.Database" [label="Schema_Operations"];
"loki_modules.loki_mixins.db_schema.DbSchema" -> "loki_modules.loki_db.Database" [label="Schema"];
"loki_modules.loki_mixins.db_version_mixin.DbVersionMixin" -> "loki_modules.loki_db.Database" [label="Version_Control"];

"loki_modules.loki_mixins.updater_database.UpdaterDatabaseMixin" -> "loki_modules.loki_updater.Updater" [label="Update_Database"];
"loki_modules.loki_mixins.updater_download_mixin.UpdaterDownloadMixin" -> "loki_modules.loki_updater.Updater" [label="Download"];
"loki_modules.loki_mixins.updater_liftover_mixin.UpdaterLiftOverMixin" -> "loki_modules.loki_updater.Updater" [label="LiftOver"];
"loki_modules.loki_mixins.updater_operations_mixin.UpdaterOperationsMixin" -> "loki_modules.loki_updater.Updater" [label="Operations"];

"loki_modules.loki_mixins.source_db_operations_mixin.SourceDbOperations" -> "loki_modules.loki_source.Source" [label="Operations"];
"loki_modules.loki_mixins.source_utility_methods_mixin.SourceUtilityMethods" -> "loki_modules.loki_source.Source" [label="Utility"];


}
